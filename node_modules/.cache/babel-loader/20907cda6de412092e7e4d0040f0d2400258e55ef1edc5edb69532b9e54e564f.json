{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\OneDrive\\\\Desktop\\\\weather app\\\\src\\\\components\\\\search\\\\search.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = ({\n  onSearchChange\n}) => {\n  _s();\n  const [search, setSearch] = useState(null);\n  const loadOptions = (inputValue, loadedOptions, {\n    page\n  }) => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => ({\n          value: `${city.latitude} ${city.longitude}`,\n          label: `${city.name}, ${city.country}`\n        })),\n        hasMore: false,\n        // Set this according to your API's pagination support\n        additional: {\n          page: page + 1\n        }\n      };\n    }).catch(err => {\n      console.error(err);\n      return {\n        options: [],\n        hasMore: false\n      };\n    });\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for city\",\n    debounceTimeout: 600,\n    value: search,\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"rZ+0pF47En10nDqJpRK7x4d9dB0=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsxDEV","_jsxDEV","Search","onSearchChange","_s","search","setSearch","loadOptions","inputValue","loadedOptions","page","fetch","then","response","json","options","data","map","city","value","latitude","longitude","label","name","country","hasMore","additional","catch","err","console","error","handleOnChange","searchData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/OneDrive/Desktop/weather app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport { AsyncPaginate } from \"react-select-async-paginate\";\r\nimport { GEO_API_URL, geoApiOptions } from \"../../api\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n  const [search, setSearch] = useState(null);\r\n\r\n  const loadOptions = (inputValue, loadedOptions, { page }) => {\r\n    return fetch(\r\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\r\n      geoApiOptions\r\n    )\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        return {\r\n          options: response.data.map((city) => ({\r\n            value: `${city.latitude} ${city.longitude}`,\r\n            label: `${city.name}, ${city.country}`,\r\n          })),\r\n          hasMore: false, // Set this according to your API's pagination support\r\n          additional: {\r\n            page: page + 1,\r\n          },\r\n        };\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n        return {\r\n          options: [],\r\n          hasMore: false,\r\n        };\r\n      });\r\n  };\r\n\r\n  const handleOnChange = (searchData) => {\r\n    setSearch(searchData);\r\n    onSearchChange(searchData);\r\n  };\r\n\r\n  return (\r\n    <AsyncPaginate\r\n      placeholder=\"Search for city\"\r\n      debounceTimeout={600}\r\n      value={search}\r\n      onChange={handleOnChange}\r\n      loadOptions={loadOptions}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Search;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,WAAW,EAAEC,aAAa,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,MAAMC,MAAM,GAAGA,CAAC;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMW,WAAW,GAAGA,CAACC,UAAU,EAAEC,aAAa,EAAE;IAAEC;EAAK,CAAC,KAAK;IAC3D,OAAOC,KAAK,CACV,GAAGb,WAAW,4CAA4CU,UAAU,EAAE,EACtET,aACF,CAAC,CACEa,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO;QACLE,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;UACpCC,KAAK,EAAE,GAAGD,IAAI,CAACE,QAAQ,IAAIF,IAAI,CAACG,SAAS,EAAE;UAC3CC,KAAK,EAAE,GAAGJ,IAAI,CAACK,IAAI,KAAKL,IAAI,CAACM,OAAO;QACtC,CAAC,CAAC,CAAC;QACHC,OAAO,EAAE,KAAK;QAAE;QAChBC,UAAU,EAAE;UACVhB,IAAI,EAAEA,IAAI,GAAG;QACf;MACF,CAAC;IACH,CAAC,CAAC,CACDiB,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClB,OAAO;QACLb,OAAO,EAAE,EAAE;QACXU,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC;EACN,CAAC;EAED,MAAMM,cAAc,GAAIC,UAAU,IAAK;IACrC1B,SAAS,CAAC0B,UAAU,CAAC;IACrB7B,cAAc,CAAC6B,UAAU,CAAC;EAC5B,CAAC;EAED,oBACE/B,OAAA,CAACJ,aAAa;IACZoC,WAAW,EAAC,iBAAiB;IAC7BC,eAAe,EAAE,GAAI;IACrBf,KAAK,EAAEd,MAAO;IACd8B,QAAQ,EAAEJ,cAAe;IACzBxB,WAAW,EAAEA;EAAY;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1B,CAAC;AAEN,CAAC;AAACnC,EAAA,CA5CIF,MAAM;AAAAsC,EAAA,GAANtC,MAAM;AA8CZ,eAAeA,MAAM;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}